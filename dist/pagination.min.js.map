{"version":3,"file":"pagination.min.js","sources":["../src/pagination.js"],"sourcesContent":["function webflowPagination(options) {\n  document.addEventListener('DOMContentLoaded', () => {\n    // デフォルト設定\n    const defaultOptions = {\n      splitTag: 'h3',\n      contentContainerSelector: '.rich-text-content',\n      paginationContainerSelector: '.pagination-container',\n      prevLinkClass: 'pagination-prev',\n      countLinkClass: 'pagination-count',\n      countLinkTextClass: 'pagination-count-text',\n      nextLinkClass: 'pagination-next',\n      prevText: '前へ',\n      nextText: '次へ',\n      currentPageLinkClass: 'active',\n      btnLinkTextClass: 'pagination-btn-text',\n      child: false\n    };\n\n    // オプションをマージ\n    const settings = { ...defaultOptions, ...options };\n\n    // 現在のページ番号を取得\n    const currentPage = new URLSearchParams(window.location.search).get('page') || 1;\n\n    // コンテンツコンテナを取得\n    const contentContainer = document.querySelector(settings.contentContainerSelector);\n\n    if (contentContainer) {\n      // コンテンツを指定されたタグで分割する関数\n      function splitContentByTag(tag, child) {\n        const contentParts = [];\n        let tempContainer = document.createElement('div');\n\n        if (child && tag.indexOf(' ') > -1 && tag.split(' ').length === 2 && tag.split(' ')[1]) {\n          const [parentTag, childTag] = tag.split(' ');\n          const parentElements = contentContainer.querySelectorAll(parentTag);\n\n          parentElements.forEach((parentElement, index) => {\n            const childElement = parentElement.querySelector(childTag);\n            if (childElement) {\n              if (tempContainer.children.length) {\n                contentParts.push(tempContainer.innerHTML);\n                tempContainer = document.createElement('div');\n              }\n              tempContainer.appendChild(parentElement.cloneNode(true));\n            }\n            if (index === parentElements.length - 1 && tempContainer.children.length) {\n              contentParts.push(tempContainer.innerHTML);\n            }\n          });\n        } else {\n          Array.from(contentContainer.children).forEach((child, index) => {\n            if (child.tagName.toLowerCase() === tag) {\n              if (tempContainer.children.length) {\n                contentParts.push(tempContainer.innerHTML);\n                tempContainer = document.createElement('div');\n              }\n            }\n            tempContainer.appendChild(child.cloneNode(true));\n            if (index === contentContainer.children.length - 1) {\n              contentParts.push(tempContainer.innerHTML);\n            }\n          });\n        }\n\n        return contentParts;\n      }\n\n\n      // 分割されたコンテンツを取得\n      const contentParts = splitContentByTag(settings.splitTag, settings.child);\n\n      // 分割されたコンテンツを表示\n      contentContainer.innerHTML = contentParts[currentPage - 1] || '';\n\n      // ページネーション機能を実装\n      function createPagination(totalPages, currentPage) {\n        let paginationHtml = '';\n\n        // 前へのリンクを追加\n        if (currentPage > 1) {\n          paginationHtml += `<a href=\"?page=${currentPage - 1}\" class=\"${settings.prevLinkClass}\"><span class=\"${settings.btnLinkTextClass}\">${settings.prevText}</span></a>`;\n        }\n\n        // ページ番号のリンクを追加\n        for (let i = 1; i <= totalPages; i++) {\n          if (i === parseInt(currentPage)) {\n            paginationHtml += `<p class=\"${settings.countLinkClass} ${settings.currentPageLinkClass}\"><span class=\"${settings.countLinkTextClass}\">${i}</span></p>`;\n          } else {\n            paginationHtml += `<a href=\"?page=${i}\" class=\"${settings.countLinkClass}\"><span class=\"${settings.countLinkTextClass}\">${i}<span></a>`;\n          }\n        }\n\n        // 次へのリンクを追加\n        if (currentPage < totalPages) {\n          paginationHtml += `<a href=\"?page=${currentPage + 1}\" class=\"${settings.nextLinkClass}\"><span class=\"${settings.btnLinkTextClass}\">${settings.nextText}</span></a>`;\n        }\n\n        return paginationHtml;\n      }\n\n\n      // ページネーションHTMLを生成\n      const totalPages = contentParts.length;\n      let paginationHtml = createPagination(totalPages, parseInt(currentPage));\n\n      // ページネーシーションHTMLを挿入\n      const paginationContainer = document.querySelector(settings.paginationContainerSelector);\n      paginationContainer.innerHTML = paginationHtml;\n\n      // クリックイベントを追加\n      paginationContainer.addEventListener('click', (event) => {\n        if (event.target.classList.contains('pagination-ellipsis')) {\n          event.preventDefault();\n          const startPage = parseInt(event.target.getAttribute('data-start-page'));\n          paginationHtml = createPagination(totalPages, parseInt(currentPage), startPage);\n          paginationContainer.innerHTML = paginationHtml;\n        }\n        // 前のページ部分に戻るリンクのクリックイベント\n        if (event.target.classList.contains('pagination-ellipsis-back')) {\n          event.preventDefault();\n          const startPage = parseInt(event.target.getAttribute('data-start-page'));\n          paginationHtml = createPagination(totalPages, parseInt(currentPage), startPage);\n          paginationContainer.innerHTML = paginationHtml;\n        }\n      });\n    }\n  });\n}\n\nwindow.webflowPagination = webflowPagination;"],"names":["window","webflowPagination","options","document","addEventListener","settings","splitTag","contentContainerSelector","paginationContainerSelector","prevLinkClass","countLinkClass","countLinkTextClass","nextLinkClass","prevText","nextText","currentPageLinkClass","btnLinkTextClass","child","currentPage","URLSearchParams","location","search","get","contentContainer","querySelector","splitContentByTag","tag","contentParts","tempContainer","createElement","indexOf","split","length","parentTag","childTag","parentElements","querySelectorAll","forEach","parentElement","index","children","push","innerHTML","appendChild","cloneNode","Array","from","tagName","toLowerCase","createPagination","totalPages","paginationHtml","i","parseInt","paginationContainer","event","target","classList","contains","preventDefault","getAttribute"],"mappings":"yBAkIAA,OAAOC,kBAlIP,SAA2BC,GACzBC,SAASC,iBAAiB,oBAAoB,KAE5C,MAgBMC,EAAW,CAffC,SAAU,KACVC,yBAA0B,qBAC1BC,4BAA6B,wBAC7BC,cAAe,kBACfC,eAAgB,mBAChBC,mBAAoB,wBACpBC,cAAe,kBACfC,SAAU,KACVC,SAAU,KACVC,qBAAsB,SACtBC,iBAAkB,sBAClBC,OAAO,KAIgCf,GAGnCgB,EAAc,IAAIC,gBAAgBnB,OAAOoB,SAASC,QAAQC,IAAI,SAAW,EAGzEC,EAAmBpB,SAASqB,cAAcnB,EAASE,0BAEzD,GAAIgB,EAAkB,CAEpB,SAASE,EAAkBC,EAAKT,GAC9B,MAAMU,EAAe,GACrB,IAAIC,EAAgBzB,SAAS0B,cAAc,OAE3C,GAAIZ,GAASS,EAAII,QAAQ,MAAQ,GAA+B,IAA1BJ,EAAIK,MAAM,KAAKC,QAAgBN,EAAIK,MAAM,KAAK,GAAI,CACtF,MAAOE,EAAWC,GAAYR,EAAIK,MAAM,KAClCI,EAAiBZ,EAAiBa,iBAAiBH,GAEzDE,EAAeE,SAAQ,CAACC,EAAeC,KAChBD,EAAcd,cAAcU,KAE3CN,EAAcY,SAASR,SACzBL,EAAac,KAAKb,EAAcc,WAChCd,EAAgBzB,SAAS0B,cAAc,QAEzCD,EAAce,YAAYL,EAAcM,WAAU,KAEhDL,IAAUJ,EAAeH,OAAS,GAAKJ,EAAcY,SAASR,QAChEL,EAAac,KAAKb,EAAcc,UAClC,GAEJ,MACEG,MAAMC,KAAKvB,EAAiBiB,UAAUH,SAAQ,CAACpB,EAAOsB,KAChDtB,EAAM8B,QAAQC,gBAAkBtB,GAC9BE,EAAcY,SAASR,SACzBL,EAAac,KAAKb,EAAcc,WAChCd,EAAgBzB,SAAS0B,cAAc,QAG3CD,EAAce,YAAY1B,EAAM2B,WAAU,IACtCL,IAAUhB,EAAiBiB,SAASR,OAAS,GAC/CL,EAAac,KAAKb,EAAcc,UAClC,IAIJ,OAAOf,CACT,CAIA,MAAMA,EAAeF,EAAkBpB,EAASC,SAAUD,EAASY,OAMnE,SAASgC,EAAiBC,EAAYhC,GACpC,IAAIiC,EAAiB,GAGjBjC,EAAc,IAChBiC,GAAmB,kBAAiBjC,EAAc,aAAab,EAASI,+BAA+BJ,EAASW,qBAAqBX,EAASQ,uBAIhJ,IAAK,IAAIuC,EAAI,EAAGA,GAAKF,EAAYE,IAC3BA,IAAMC,SAASnC,GACjBiC,GAAmB,aAAY9C,EAASK,kBAAkBL,EAASU,sCAAsCV,EAASM,uBAAuByC,eAEzID,GAAmB,kBAAiBC,aAAa/C,EAASK,gCAAgCL,EAASM,uBAAuByC,cAS9H,OAJIlC,EAAcgC,IAChBC,GAAmB,kBAAiBjC,EAAc,aAAab,EAASO,+BAA+BP,EAASW,qBAAqBX,EAASS,uBAGzIqC,CACT,CA1BA5B,EAAiBmB,UAAYf,EAAaT,EAAc,IAAM,GA8B9D,MAAMgC,EAAavB,EAAaK,OAChC,IAAImB,EAAiBF,EAAiBC,EAAYG,SAASnC,IAG3D,MAAMoC,EAAsBnD,SAASqB,cAAcnB,EAASG,6BAC5D8C,EAAoBZ,UAAYS,EAGhCG,EAAoBlD,iBAAiB,SAAUmD,IACzCA,EAAMC,OAAOC,UAAUC,SAAS,yBAClCH,EAAMI,iBACYN,SAASE,EAAMC,OAAOI,aAAa,oBACrDT,EAAiBF,EAAiBC,EAAYG,SAASnC,IACvDoC,EAAoBZ,UAAYS,GAG9BI,EAAMC,OAAOC,UAAUC,SAAS,8BAClCH,EAAMI,iBACYN,SAASE,EAAMC,OAAOI,aAAa,oBACrDT,EAAiBF,EAAiBC,EAAYG,SAASnC,IACvDoC,EAAoBZ,UAAYS,EAClC,GAEJ,IAEJ"}