{"version":3,"file":"pagination.min.js","sources":["../src/pagination.js"],"sourcesContent":["export function webflowPagination(options) {\n  document.addEventListener('DOMContentLoaded', () => {\n    // デフォルト設定\n    const defaultOptions = {\n      splitTag: 'h3',\n      contentContainerSelector: '.rich-text-content',\n      paginationContainerSelector: '.pagination-container',\n    };\n\n    // オプションをマージ\n    const settings = { ...defaultOptions, ...options };\n\n    // 現在のページ番号を取得\n    const currentPage = new URLSearchParams(window.location.search).get('page') || 1;\n\n    // コンテンツコンテナを取得\n    const contentContainer = document.querySelector(settings.contentContainerSelector);\n\n    if (contentContainer) {\n      // コンテンツを指定されたタグで分割する関数\n      function splitContentByTag(tag) {\n        const contentParts = [];\n        let tempContainer = document.createElement('div');\n\n        Array.from(contentContainer.children).forEach((child) => {\n          if (child.tagName.toLowerCase() === tag) {\n            if (tempContainer.children.length) {\n              contentParts.push(tempContainer.innerHTML);\n              tempContainer = document.createElement('div');\n            }\n          }\n          tempContainer.appendChild(child.cloneNode(true));\n        });\n\n        contentParts.push(tempContainer.innerHTML);\n\n        return contentParts;\n      }\n\n      // 分割されたコンテンツを取得\n      const contentParts = splitContentByTag(settings.splitTag);\n\n      // 分割されたコンテンツを表示\n      contentContainer.innerHTML = contentParts[currentPage - 1] || '';\n\n      // ページネーション機能を実装\n      function createPagination(totalPages, currentPage) {\n        let paginationHtml = '';\n\n        // 前へのリンクを追加\n        if (currentPage > 1) {\n          paginationHtml += `<a href=\"?page=${currentPage - 1}\" class=\"pagination-prev\">前へ</a>`;\n        }\n\n        // ページ番号のリンクを追加\n        for (let i = 1; i <= totalPages; i++) {\n          if (i === parseInt(currentPage)) {\n            paginationHtml += `<span class=\"pagination-count active\">${i}</span>`;\n          } else {\n            paginationHtml += `<a href=\"?page=${i}\" class=\"pagination-count\">${i}</a>`;\n          }\n        }\n\n        // 次へのリンクを追加\n        if (currentPage < totalPages) {\n          paginationHtml += `<a href=\"?page=${currentPage + 1}\" class=\"pagination-next\">次へ</a>`;\n        }\n\n        return paginationHtml;\n      }\n\n      // ページネーションHTMLを生成\n      const totalPages = contentParts.length;\n      let paginationHtml = createPagination(totalPages, parseInt(currentPage));\n\n      // ページネーシーションHTMLを挿入\n      const paginationContainer = document.querySelector(settings.paginationContainerSelector);\n      paginationContainer.innerHTML = paginationHtml;\n\n      // クリックイベントを追加\n      paginationContainer.addEventListener('click', (event) => {\n        if (event.target.classList.contains('pagination-ellipsis')) {\n          event.preventDefault();\n          const startPage = parseInt(event.target.getAttribute('data-start-page'));\n          paginationHtml = createPagination(totalPages, parseInt(currentPage), startPage);\n          paginationContainer.innerHTML = paginationHtml;\n        }\n        // 前のページ部分に戻るリンクのクリックイベント\n        if (event.target.classList.contains('pagination-ellipsis-back')) {\n          event.preventDefault();\n          const startPage = parseInt(event.target.getAttribute('data-start-page'));\n          paginationHtml = createPagination(totalPages, parseInt(currentPage), startPage);\n          paginationContainer.innerHTML = paginationHtml;\n        }\n      });\n    }\n  });\n}"],"names":["options","document","addEventListener","settings","splitTag","contentContainerSelector","paginationContainerSelector","currentPage","URLSearchParams","window","location","search","get","contentContainer","querySelector","splitContentByTag","tag","contentParts","tempContainer","createElement","Array","from","children","forEach","child","tagName","toLowerCase","length","push","innerHTML","appendChild","cloneNode","createPagination","totalPages","paginationHtml","i","parseInt","paginationContainer","event","target","classList","contains","preventDefault","getAttribute"],"mappings":"0EAAO,SAA2BA,GAChCC,SAASC,iBAAiB,oBAAoB,KAE5C,MAOMC,EAAW,CANfC,SAAU,KACVC,yBAA0B,qBAC1BC,4BAA6B,2BAIUN,GAGnCO,EAAc,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,SAAW,EAGzEC,EAAmBZ,SAASa,cAAcX,EAASE,0BAEzD,GAAIQ,EAAkB,CAEpB,SAASE,EAAkBC,GACzB,MAAMC,EAAe,GACrB,IAAIC,EAAgBjB,SAASkB,cAAc,OAc3C,OAZAC,MAAMC,KAAKR,EAAiBS,UAAUC,SAASC,IACzCA,EAAMC,QAAQC,gBAAkBV,GAC9BE,EAAcI,SAASK,SACzBV,EAAaW,KAAKV,EAAcW,WAChCX,EAAgBjB,SAASkB,cAAc,QAG3CD,EAAcY,YAAYN,EAAMO,WAAU,GAAM,IAGlDd,EAAaW,KAAKV,EAAcW,WAEzBZ,CACT,CAGA,MAAMA,EAAeF,EAAkBZ,EAASC,UAMhD,SAAS4B,EAAiBC,EAAY1B,GACpC,IAAI2B,EAAiB,GAGjB3B,EAAc,IAChB2B,GAAmB,kBAAiB3B,EAAc,qCAIpD,IAAK,IAAI4B,EAAI,EAAGA,GAAKF,EAAYE,IAC3BA,IAAMC,SAAS7B,GACjB2B,GAAmB,yCAAwCC,WAE3DD,GAAmB,kBAAiBC,+BAA+BA,QASvE,OAJI5B,EAAc0B,IAChBC,GAAmB,kBAAiB3B,EAAc,qCAG7C2B,CACT,CA1BArB,EAAiBgB,UAAYZ,EAAaV,EAAc,IAAM,GA6B9D,MAAM0B,EAAahB,EAAaU,OAChC,IAAIO,EAAiBF,EAAiBC,EAAYG,SAAS7B,IAG3D,MAAM8B,EAAsBpC,SAASa,cAAcX,EAASG,6BAC5D+B,EAAoBR,UAAYK,EAGhCG,EAAoBnC,iBAAiB,SAAUoC,IACzCA,EAAMC,OAAOC,UAAUC,SAAS,yBAClCH,EAAMI,iBACYN,SAASE,EAAMC,OAAOI,aAAa,oBACrDT,EAAiBF,EAAiBC,EAAYG,SAAS7B,IACvD8B,EAAoBR,UAAYK,GAG9BI,EAAMC,OAAOC,UAAUC,SAAS,8BAClCH,EAAMI,iBACYN,SAASE,EAAMC,OAAOI,aAAa,oBACrDT,EAAiBF,EAAiBC,EAAYG,SAAS7B,IACvD8B,EAAoBR,UAAYK,EAClC,GAEJ,IAEJ"}